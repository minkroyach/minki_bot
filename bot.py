import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
OWNER_ID = 1030243433  # –ñ—ë—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –≤–∞—à ID
BOT_TOKEN = os.getenv("BOT_TOKEN", "8043165621:AAEnOIxob-8xXkUZNKqJdFbqBEozjtFyMb4")  # –¢–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "—Ö–µ–ª–æ—É!! —Ç—É—Ç –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –±–∞–Ω–æ—á–∫–µ –º—ã—Å–ª—å, –≤–æ–ø—Ä–æ—Å–∏–∫ –∏–ª–∏ —Ç—ë–ø–ª—ã–π –ø—É–∫ üòå\n"
        "–æ—Ç–≤–µ—á–∞—é, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ—á—å"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    text = update.message.text
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    owner_message = (
        f"üíå –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or '–∞–Ω–æ–Ω'} (ID: {user.id}):\n\n"
        f"{text}"
    )
    
    try:
        await context.bot.send_message(chat_id=OWNER_ID, text=owner_message)
        await update.message.reply_text("ü•∫üí≠ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–Ω–æ—á–∫—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reply –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤"""
    if update.effective_user.id != OWNER_ID:
        return  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å

    if len(context.args) < 2:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /reply <user_id> <—Ç–µ–∫—Å—Ç>")
        return

    user_id = context.args[0]
    reply_text = ' '.join(context.args[1:])
    
    try:
        await context.bot.send_message(
            chat_id=int(user_id),
            text=f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{reply_text}"
        )
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        error_message = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {str(e)}"
        await update.message.reply_text(error_message)
        logger.error(error_message)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.critical("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {OWNER_ID}")
    
    try:
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("reply", reply))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.run_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
