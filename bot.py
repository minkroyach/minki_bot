import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

OWNER_ID = int(os.getenv("OWNER_ID"))

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("—Ö–µ–ª–æ—É!! —Ç—É—Ç –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –±–∞–Ω–æ—á–∫–µ –º—ã—Å–ª—å, –≤–æ–ø—Ä–æ—Å–∏–∫ –∏–ª–∏ —Ç—ë–ø–ª—ã–π –ø—É–∫ üòå\n–æ—Ç–≤–µ—á–∞—é, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ—á—å")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    await context.bot.send_message(chat_id=OWNER_ID, text=f"üíå –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or '–∞–Ω–æ–Ω'}:
{text}")
    await update.message.reply_text("ü•∫üí≠ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–Ω–æ—á–∫—É")

async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /reply <user_id> <—Ç–µ–∫—Å—Ç>")
        return

    user_id = context.args[0]
    text = ' '.join(context.args[1:])
    try:
        await context.bot.send_message(chat_id=int(user_id), text=f"üì¨ –û—Ç–≤–µ—Ç: {text}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

def main():
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reply", reply))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()