import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
OWNER_ID = 1030243433
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    logging.critical("‚ùå CRITICAL: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    try:
        with open('token.txt') as f:
            BOT_TOKEN = f.read().strip()
            logging.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ token.txt")
    except:
        logging.critical("üö® –§–∞–π–ª token.txt —Ç–∞–∫–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        exit(1)

async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reply –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤"""
    if update.effective_user.id != OWNER_ID:
        return  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å

    if len(context.args) < 2:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /reply <user_id> <—Ç–µ–∫—Å—Ç>")
        return

    user_id = context.args[0]
    reply_text = ' '.join(context.args[1:])
    
    try:
        await context.bot.send_message(
            chat_id=int(user_id),
            text=f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{reply_text}"
        )
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        error_message = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {str(e)}"
        await update.message.reply_text(error_message)
        logger.error(error_message)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.critical("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {OWNER_ID}")
    
    try:
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("reply", reply))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.run_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
